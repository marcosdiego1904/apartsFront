import React from 'react';
// import { Rating } from '@smastrom/react-rating'; // Rating not used in this simplified list item for now
// import '@smastrom/react-rating/style.css'; // Rating styles not needed for now
import '../styles/MaintenanceRequestListItem.css';
import { type MaintenanceRequest } from '../types/maintenance'; // Adjusted path

// OLD DEFINITION - REMOVED
// export interface DetailedMaintenanceRequest {
//   id: string;
//   description: string;
//   category: string;
//   specificLocation: string;
//   urgency: 'Baja' | 'Media' | 'Alta/Emergencia';
//   permissionToEnter: boolean;
//   preferredEntryTime?: string;
//   submittedDate: string;
//   status: 'Enviada' | 'Recibida' | 'En Progreso' | 'Programada' | 'Resuelta/Pendiente de Valoración' | 'Completada/Cerrada' | 'Cancelada';
//   title?: string;
//   scheduledDate?: string;
//   resolutionDate?: string;
//   managerNotes?: string;
//   feedbackRating?: number;
//   feedbackComments?: string;
// }

interface MaintenanceRequestListItemProps {
  request: MaintenanceRequest; // Use the consolidated type
  onViewDetails: (requestId: string) => void;
}

const MaintenanceRequestListItem: React.FC<MaintenanceRequestListItemProps> = ({ request, onViewDetails }) => {
  const formatDate = (dateString: string | undefined) => {
    if (!dateString) return 'N/A';
    // Dates are ISO strings, parse them
    return new Date(dateString).toLocaleDateString('es-ES', {
      year: 'numeric', month: 'short', day: 'numeric',
      hour: '2-digit', minute: '2-digit'
    });
  };

  // CSS classes are generated by converting status/urgency to lowercase and replacing spaces/slashes.
  // This should largely work with the new English enum values as well.
  const getStatusClass = (status: MaintenanceRequest['status']) => {
    return `status-${status.toLowerCase().replace(/[\s/]+/g, '-')}`;
  };

  const getUrgencyClass = (urgency: MaintenanceRequest['urgency']) => {
    return `urgency-${urgency.toLowerCase().replace(/[\s/]+/g, '-')}`;
  };

  // Adapt display text for new urgency/status values if needed, or ensure CSS handles them.
  // For example, 'Emergency' instead of 'Alta/Emergencia'. The component will display the direct value.

  return (
    <li className={`maintenance-list-item ${getStatusClass(request.status)} ${getUrgencyClass(request.urgency)}`}>
      <div className="item-header">
        <h5 className="item-title">{
          request.title || 
          (request.description.length > 60 ? request.description.substring(0, 60) + '...' : request.description)
        }</h5>
        <span className={`item-status-badge ${getStatusClass(request.status)}`}>{request.status}</span>
      </div>
      <div className="item-body">
        <p><strong>Categoría:</strong> {request.category}</p>
        <p><strong>Ubicación:</strong> {request.specificLocation}</p>
        <p><strong>Enviada:</strong> {formatDate(request.submittedDate)}</p>
        <p><strong>Urgencia:</strong> <span className={getUrgencyClass(request.urgency)}>{request.urgency}</span></p>
        {request.scheduledDate && (
          <p><strong>Programada para:</strong> {formatDate(request.scheduledDate)}</p>
        )}
         {request.status === 'Resolved/Pending Review' && !request.feedbackRating && (
          <p className="pending-feedback-notice"><strong>Estado:</strong> Pendiente de tu valoración</p>
        )}
        {/* Display feedbackRating if available (it's part of MaintenanceRequest now) */}
        {request.feedbackRating && (
          <p><strong>Tu Valoración:</strong> {request.feedbackRating} estrellas</p>
        )}
      </div>
      <div className="item-footer">
        <button onClick={() => onViewDetails(request.id)} className="details-button">
          Ver Detalles / Valorar
        </button>
      </div>
    </li>
  );
};

export default MaintenanceRequestListItem; 